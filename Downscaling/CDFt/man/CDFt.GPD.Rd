\name{CDFt.GPD}
\title{Downscaling or bias correction of Generalized Pareto Distribution (GPD) CDF through CDF-transformation}
\usage{
CDFt.GPD(ObsRp, DataGp, DataGf, muO=0, muGp=0, muGf=NULL, npas = 100, dev = 2)
}
\alias{CDFt.GPD}
\description{
  Downscales (or corrects the model outputs) GPD cumulative distribution function (CDF) of a climate variable from large- to local-scale by applying a equivalent of proportionality transformation :
  i.e., based on a GPD CDF representing a variable at large scale (i.e., low spatial resolution) and the equivalent GPD CDF at a local scale (e.g., modeled at a weather station), this method finds a mathematical transformation allowing to go from the large- to the local-scale CDF. Hence, when a new large-scale GPD CDF is given, a new local-scale CDF (not necessarily GPD) is downscaled based on this transformation.
}
\arguments{
  \item{ObsRp}{Observed time series of the variable (e.g., temperature) at the local scale to be used for estimation of the calibration local-scale GPD CDF.}
  \item{DataGp}{Large-scale time series to be used for estimation of the calibration large-scale GPD CDF.}
  \item{DataGf}{Large-scale time series to be used for estimation of the large-scale GPD CDF to be downscaled.}
  \item{muO}{Location parameter (= threshold) for local-scale data.}
  \item{muGp}{Location parameter (= threshold) for the calibration (e.g., present) large-scale data.}
  \item{muGf}{Location parameter (= threshold) for large-scale data to be downscaled (e.g., for future climate). If muGf is NULL (the default), then, it is automatically estimated with the same proportion (in DataGf) as muGp (in DataGp).}
  \item{npas}{Number of "cuts" for which quantiles will be estimated (Default is 100).}
  \item{dev}{Coefficient of development (of the difference between the mean of the large-scale historical data and the mean of the large-scale future data to be downscaled). This development is used to extend range of data on which the quantiles will be calculated for the CDF to be downscaled (Default is 2).}
}
\value{
  CDFt.GPD returns a list with components
  \item{DS}{Downscaled time series generated by "Quantile-matching" method performed between large-scale GPD CDF to be downscaled, and the local-scale downscaled CDF. Note that the length of this array is equal to the length of DataGf}
  \item{x}{an array containing values of the variable (e.g., temperature) where the downscaled (and other) CDF has been estimated.}
  \item{FRp}{an array containing the values of the local-scale GPD CDF used for calibration, evaluated at the points in x.}
  \item{FGp}{an array containing the values of the large-scale GPD CDF used for calibration, evaluated at the points in x.}
  \item{FGf}{an array containing the values of the large-scale GPD CDF used for downscaling, evaluated at the points in x.}
  \item{FRf}{an array containing the values of the downscaled CDF evaluated at the points in x.}
  \item{muGf}{The estimated muGf.}
}
\details{This function provides a parametric (GPD) version of the CDFt function. For details on the (empirical) mathematical formulation of the transformation used to translate the large-scale CDF to the local-scale one, see the reference below. Note that in this R package, the large-scale data (i.e., DataGp and DataGf) are automatically transformed to have the same mean as the ObsRp time series. This avoid to get out of the range of applicability of the CDFt method. However, the large-scale output CDFs have their initial mean (i.e., not centered).

P.-A. Michelangeli, M. Vrac, H. Loukos. "Probabilistic downscaling approaches: Application to wind cumulative distribution functions", Geophys. Res. Lett.,  doi:10.1029/2009GL038401, 2009.
}
\author{M. Vrac (mathieu.vrac@lsce.ipsl.fr)}
\seealso{\code{\link{CDFt}}, \code{\link{CDFt.Gaussian}}, \code{\link{CDFt.Weibull}}, \code{\link{CDFt.Gamma.Dirac}}}
\examples{
## Example

### Generation of example data

muGp = 0
muGf = NULL
muLS  = 2

O = rgpd(n=1500, xi=0.3, mu=muLS, beta=0.2)
Gp = rgpd(n=1500, xi=0.1, mu=muGp, beta=0.3)
Gf = rgpd(n=1500, xi=0.4, mu=3, beta=0.4)

### Call of the CDFt.GPD method
CG = CDFt.GPD(O,Gp,Gf, muO=muLS, muGp=muGp,muGf=NULL)

x <- CG$x
FGp <- CG$FGp
FGf <- CG$FGf
FRp <- CG$FRp
FRf <- CG$FRf
ds <- CG$DS
mf <- CG$muGf

### Plot the results
par(mfrow=c(1,2))

plot(x, FGp,type="l",lty=2,ylim=c(0,1),xlab="x",ylab="CDF(x)")
lines(x,FGf,type="l",lty=2,col=2)
lines(x,FRp,type="l")
lines(x,FRf,type="l",col=2)

# Compare FRf with empirical CDF from downscaled values
e = ecdf(ds)
lines(x,e(x),type="l",lty=2,col=4)

lines(c(mf,mf), c(-1000,1000), type="l",lty=2,col=5)

plot(Gf,ds,xlab="Large-scale data", ylab="Downscaled data")

}
\keyword{math}
\keyword{distribution}
\keyword{univar}
\keyword{models}
